?tapply
?lappy
?lapply
?aggregate
install.packages("lavaan", dependencies=TRUE)
install.packages("semPlot", dependencies=TRUE)
gurn <- read.csv("~/Desktop/gurn.csv", header=FALSE)
View(gurn)
ghost <- read.csv("~/Desktop/ghost.csv", header=FALSE)
View(ghost)
mod1 <- lm(Mouth ~ D1+D2, data=ghost)
mod2 <- lm(Eyes ~ D1+D2, data=ghost)
mod3 <- lm(Nose ~ D1+D2, data=ghost)
mod4 <- lm(Face ~ D1+D2, data=ghost)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
View(ghost)
gurn <- read.csv("~/Desktop/gurn.csv")
View(gurn)
ghost <- read.csv("~/Desktop/ghost.csv")
View(ghost)
mod1 <- lm(Mouth ~ D1+D2, data=ghost)
mod2 <- lm(Eyes ~ D1+D2, data=ghost)
mod3 <- lm(Nose ~ D1+D2, data=ghost)
mod4 <- lm(Face ~ D1+D2, data=ghost)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
mod1 <- lm(Mouth ~ D1+D2, data=gurn)
mod2 <- lm(Eyes ~ D1+D2, data=gurn)
mod3 <- lm(Nose ~ D1+D2, data=gurn)
mod4 <- lm(Face ~ D1+D2, data=gurn)
summary(mod1)
summary(mod2)
summary(mod3)
summary(mod4)
install.packages("FactoMineR")
library("FactoMineR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
PCA1 <- read.csv("~/Desktop/PCA1.csv")
View(PCA1)
PCA2 <- read.csv("~/Desktop/PCA2.csv")
View(PCA2)
?PCA()
PCA_med<-data.frame(PCA1$STOP_SIGNAL_MEAN_SRTT, PCA1$STROOP_EffectA, PCA1$Op.Span_Absolute, PCA1$WCST_PerseverativeErrors_SS)
View(PCA_med)
med <- PCA(PCA_med)
summary(med)
med$var$coord
PCA_list<-data.frame(PCA2$STOP_SIGNAL_MEAN_SRTT, PCA2$STROOP_EffectA, PCA2$Op.Span_Absolute, PCA2$WCST_PerseverativeErrors_SS)
PCA(PCA_list)
list <- PCA(PCA_list)
summary(list)
med$var$coord
list$var$coord
setwd("/Volumes/a40p4/PLS/EFPCA")
l2.PCA <- principal(Listwise[,-1], nfactors=2, rotate="varimax")
library(psych)
l2.PCA <- principal(Listwise[,-1], nfactors=2, rotate="varimax")
MeanReplace <- read.csv("/Volumes/a40p4/PLS/EFPCA/MeanReplace.csv")
View(MeanReplace)
Listwise <- read.csv("/Volumes/a40p4/PLS/EFPCA/Listwise.csv")
View(Listwise)
l.PCA <- princomp(Listwise[,-1])
l.PCA <- princomp(mydata, cor=TRUE)
summary(l.PCA) # print variance accounted for
loadings(l.PCA) # pc loadings
plot(l.PCA,type="lines") # scree plot
l.PCA$scores # the principal components
biplot(l.PCA)
m.PCA <- princomp(MeanReplace[,-1])
m.PCA <- princomp(mydata, cor=TRUE)
summary(m.PCA) # print variance accounted for
loadings(m.PCA) # pc loadings
plot(m.PCA,type="lines") # scree plot
m.PCA$scores # the principal components
biplot(m.PCA)
library(psych)
l2.PCA <- principal(Listwise[,-1], nfactors=2, rotate="varimax")
library("GPArotation", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
l2.PCA <- principal(Listwise[,-1], nfactors=2, rotate="varimax")
summary(l2.PCA)
Listwise2 <- read.csv("/Volumes/a40p4/PLS/EFPCA/Listwise2.csv")
View(Listwise2)
MeanReplace2 <- read.csv("/Volumes/a40p4/PLS/EFPCA/MeanReplace2.csv")
View(MeanReplace2)
l.PCA <- princomp(Listwise2[,-1])
l.PCA <- princomp(mydata, cor=TRUE)
summary(l.PCA) # print variance accounted for
loadings(l.PCA) # pc loadings
plot(l.PCA,type="lines") # scree plot
l.PCA$scores # the principal components
biplot(l.PCA)
l.PCA <- princomp(Listwise2[-1], cor=TRUE)
summary(l.PCA) # print variance accounted for
loadings(l.PCA) # pc loadings
plot(l.PCA,type="lines") # scree plot
l.PCA$scores # the principal components
biplot(l.PCA)
l2.PCA <- princomp(Listwise2[-1], cor=TRUE)
summary(l2.PCA) # print variance accounted for
loadings(l2.PCA) # pc loadings
plot(l2.PCA,type="lines") # scree plot
l.PCA$scores # the principal components
biplot(l2.PCA)
l2.PCA <- princomp(Listwise2[-1], cor=TRUE)
summary(l2.PCA) # print variance accounted for
loadings(l2.PCA) # pc loadings
plot(l2.PCA,type="lines") # scree plot
l2.PCA$scores # the principal components
biplot(l2.PCA)
View(Listwise2)
Listwise2 <- Listwise2[,-22]
View(Listwise2)
View(MeanReplace2)
Listwise2 <- read.csv("/Volumes/a40p4/PLS/EFPCA/Listwise2.csv")
View(Listwise2)
MeanReplace2 <- read.csv("/Volumes/a40p4/PLS/EFPCA/MeanReplace2.csv")
View(MeanReplace2)
l2.PCA <- princomp(Listwise2[,-1], cor=TRUE)
summary(l2.PCA) # print variance accounted for
loadings(l2.PCA) # pc loadings
plot(l2.PCA,type="lines") # scree plot
l2.PCA$scores # the principal components
biplot(l2.PCA
)
m2.PCA <- princomp(MeanReplace2[,-1], cor=TRUE)
summary(m2.PCA) # print variance accounted for
loadings(m2.PCA) # pc loadings
plot(m2.PCA,type="lines") # scree plot
m2.PCA$scores # the principal components
biplot(m2.PCA)
WM <-data.frame(MeanReplace2$Auditory.Span..TotalScore, MeanReplace2$Op.Span_Partial)
View(WM)
WMPCA <- princomp(WM, cor=TRUE)
summary(WMPCA)
loadings(WMPCA)
plot(WMPCA, type="lines")
WMPCA$scores
print(NewM)
NewM <- data.frame(MeanReplace2$STOP_SIGNAL_MEAN_SRTT, MeanReplace2$STROOP_EffectB, MeanReplace2$WCST_PerseverativeErrors_SS, WMPCA$scores[,1])
View(NewM)
lol <- princomp(NewM, cor=TRUE)
loadings(lol)
plot(lol, type="lines")
plot(lol, type="lines")
summary(lol)
m.cor <- cor(newM)
m.cor <- cor(NewM)
View(m.cor)
m.cor <- cor(MeanReplace2)
View(MeanReplace2)
m.cor <- cor(MeanReplace2[,-1])
View(m.cor)
?cortest.bartlett
cortest.bartlett(m.cor, n=32)
install.packages("DSUR")
??"kmo"
kmo(MeanReplace2[,-1])
KMO(MeanReplace2[,-1])
PID_33_P300_ForR <- read.delim("~/Downloads/PID_33_P300_ForR.txt")
View(PID_33_P300_ForR)
with(PID_33_P300_ForR, plot(ReadingAverage, Condition, col = ifelse(e1 != -1, ifelse(e1 == 0, 'green', 'blue'), 'red')))
with(PID_33_P300_ForR, plot(ReadingAverage, Condition, col = ifelse(e1 == -1, 'red', ifelse(e1 == 0, 'green', 'blue'))))
abline(lm())
consonant <- lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==-1))
pseudo <- lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==0))
word <- lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==1))
?abline
with(PID_33_P300_ForR, plot(ReadingAverage, Condition, col = ifelse(e1 == -1, 'red', ifelse(e1 == 0, 'green', 'blue'))))
abline(consonant, col=red)
abline(pseudo, col=green)
abline(word, col=blue)
abline(consonant, col='red')
abline(pseudo, col='green')
abline(word, col='blue')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==-1)), col='red')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==-1)), col='red')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==0)), col='red')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==1)), col='red')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==-1)), col='red')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==0)), col='green')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==1)), col='blue')
with(PID_33_P300_ForR, plot(ReadingAverage, Condition, col = ifelse(e1 == -1, 'red', ifelse(e1 == 0, 'green', 'blue'))))
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==-1)), col='red')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==0)), col='green')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==1)), col='blue')
abline(lm(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==0)), col='green')
plot(ReadingAverage ~ Condition, data=subset(PID_33_P300_ForR,e1==-1))
with(PID_33_P300_ForR, plot(ReadingAverage, Condition, col = ifelse(e1 == -1, 'red', ifelse(e1 == 0, 'green', 'blue'))))
abline(lm(Condition ~ Reading Average, data=subset(PID_33_P300_ForR,e1==-1)), col='red')
abline(lm(Condition ~ Reading Average, data=subset(PID_33_P300_ForR,e1==0)), col='green')
abline(lm(Condition ~ Reading Average, data=subset(PID_33_P300_ForR,e1==1)), col='blue')
with(PID_33_P300_ForR, plot(ReadingAverage, Condition, col = ifelse(e1 == -1, 'red', ifelse(e1 == 0, 'green', 'blue'))))
abline(lm(Condition ~ ReadingAverage, data=subset(PID_33_P300_ForR,e1==-1)), col='red')
abline(lm(Condition ~ ReadingAverage, data=subset(PID_33_P300_ForR,e1==0)), col='green')
abline(lm(Condition ~ ReadingAverage, data=subset(PID_33_P300_ForR,e1==1)), col='blue')
install.packages(c("afex", "phia", "snow", "nmle", "lme4", "contrast"))
pwr.t.test(d = .328 , sig.level = .05, power = .99, type = "two.sample")
install.packages("pwr")
library("pwr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
pwr.t.test(d = .328 , sig.level = .05, power = .99, type = "two.sample")
pwr.t.test(d = .328 , sig.level = .05, power = .95, type = "two.sample")
pwr.t.test(d = .328 , sig.level = .05, power = .80, type = "two.sample")
pwr.t.test(d = .328 , sig.level = .10, power = .80, type = "two.sample")
pwr.anova.test(k = 3, f = .328, sig.level = .05, power = .99)
pwr.anova.test(k = 3, f = .328, sig.level = .05, power = .95)
pwr.anova.test(k = 3, f = .328, sig.level = .05, power = .90)
pwr.anova.test(k = 3, f = .433, sig.level = .05, power = .95)
pwr.t.test(d = .433 , sig.level = .05, power = .95, type = "two.sample")
install.packages("statmod")
install.packages("Matrix")
install.packages("gss")
pwr.t.test(d = .116, sig.level = .05, power = .8, type = c("two.sample"))
library(pwr)
install.packages("pwr")
pwr.t.test(d = .116, sig.level = .05, power = .8, type = c("two.sample"))
library(pwr)
pwr.t.test(d = .116, sig.level = .05, power = .8, type = c("two.sample"))
pwr.anova.test(k = 2, n = , f = .116, sig.level = .05, power = )
pwr.anova.test(k = 2, n = , f = .116, sig.level = .05, power = .8)
pwr.t.test(d = .52, sig.level = .05, power = .8, type = c("two.sample"))
pwr.t.test(d = .78, sig.level = .05, power = .8, type = c("two.sample"))
task <- c("Spoken Passage","Printed Passage","Printed Word","Spoken Word","FalseFont","Vocod")
lv1 <- c(0.4637576, -0.59954679, -0.28089342, 0.36649972, -0.29970777, 0.34989238)
Task_lv1 <- data.frame(task,lv1)
lv2 <- c(0.60210228, 0.54165232, -0.34560081, -0.21191415, -0.35595566, -0.23029119)
Task_lv2 <- data.frame(task, lv2)
lv3 <- c(0.50383562, -0.42238966, 0.27937683, -0.43053114, 0.42337403, -0.35367078)
Task_lv3 <- data.frame(task, lv3)
levels(Task_lv1$task) <- gsub(" ", "\n", levels(Task_lv1$task))
levels(Task_lv2$task) <- gsub(" ", "\n", levels(Task_lv2$task))
levels(Task_lv3$task) <- gsub(" ", "\n", levels(Task_lv3$task))
print <-c("Printed Passage", "Printed Word")
plv <- c(.8225, 0.68522084)
print_beh <- data.frame(print, plv)
levels(print_beh$print) <- gsub(" ", "\n", levels(print_beh$print))
story <-c("Spoken Passage", "Printed Passage")
slv <- c(0.8698824, 0.84048808)
story_beh <- data.frame(story, slv)
levels(story_beh$story) <- gsub(" ", "\n", levels(story_beh$story))
fastloc <-c("Printed Word","Spoken Word")
fllv <-c(-0.4397,0.6422)
fastloc_beh <-data.frame(fastloc, fllv)
levels(fastloc_beh$fastloc) <- gsub(" ", "\n", levels(fastloc_beh$fastloc))
#set color scheme so each condition has the same color in each plot
group.colors <- c(Audio = "#E69F00", Visual = "#56B4E9", Print ="#009E73", Speech = "#F0E442", FalseFont = "#0072B2", Vocod = "#CC79A7")
#create a factor so that bars will be in the order from the dataframe, not alphabetical
Task_lv1$task2 <- factor(Task_lv1$task, as.character(Task_lv1$task))
#make a bar plot with a line at 0
ggplot(data=Task_lv1, aes(x=task2, y=lv1)) +
geom_bar(stat="identity") + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x="Task", y="Design Score") + theme_classic() +
theme(text = element_text(size=20))
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ggplot(data=Task_lv1, aes(x=task2, y=lv1)) +
geom_bar(stat="identity") + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x="Task", y="Design Score") + theme_classic() +
theme(text = element_text(size=20))
ggplot(data=Task_lv1, aes(x=task2, y=lv1)) +
geom_bar(stat="identity") + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x="Task", y="Design Score") + theme_classic() +
theme(text = element_text(size=26))
TaskPLS_CIs <- read.csv("~/Dropbox/Papers/a40PLS/TaskPLS_CIs.csv")
TaskPLS_CIs <- TaskPLS_CIs[-c(19:36),-c(6:14)]
LV1 <- subset(TaskPLS_CIs, LV == 1)
LV2 <- subset(TaskPLS_CIs, LV == 2)
LV3 <- subset(TaskPLS_CIs, LV == 3)
levels(LV1$Condition) <- gsub(" ", "\n", levels(LV1$Condition))
levels(LV2$Condition) <- gsub(" ", "\n", levels(LV2$Condition))
levels(LV3$Condition) <- gsub(" ", "\n", levels(LV3$Condition))
library(ggplot2)
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = LV1$ul,
ymin = LV1$ll)
LV1$Condition <- factor(LV1$Condition, as.character(LV1$Condition))
p <- ggplot(data = LV1, aes(x = Condition, y = score))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=16))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=24))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=18))
ymin = LV2$ll)
LV2$Condition <- factor(LV2$Condition, as.character(LV2$Condition))
p <- ggplot(data = LV2, aes(x = Condition, y = score))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=18))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = LV2$ul,
ymin = LV2$ll)
LV2$Condition <- factor(LV2$Condition, as.character(LV2$Condition))
p <- ggplot(data = LV2, aes(x = Condition, y = score))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=18))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = LV3$ul,
ymin = LV3$ll)
LV3$Condition <- factor(LV3$Condition, as.character(LV3$Condition))
p <- ggplot(data = LV3, aes(x = Condition, y = score))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=16))
levels(StoryBehPLS_CIs$condition) <- gsub(" ", "\n", levels(StoryBehPLS_CIs$condition))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = StoryBehPLS_CIs$ul,
ymin = StoryBehPLS_CIs$ll)
StoryBehPLS_CIs$Condition <- factor(StoryBehPLS_CIs$condition, as.character(StoryBehPLS_CIs$condition))
p <- ggplot(data = StoryBehPLS_CIs, aes(x = condition, y = corr))
p1 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=12))
p1
StoryBehPLS_CIs <- read.csv("~/Dropbox/Papers/a40PLS/StoryBehPLS_CIs.csv")
levels(StoryBehPLS_CIs$condition) <- gsub(" ", "\n", levels(StoryBehPLS_CIs$condition))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = StoryBehPLS_CIs$ul,
ymin = StoryBehPLS_CIs$ll)
StoryBehPLS_CIs$Condition <- factor(StoryBehPLS_CIs$condition, as.character(StoryBehPLS_CIs$condition))
p <- ggplot(data = StoryBehPLS_CIs, aes(x = condition, y = corr))
p1 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=12))
p1
p1 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=18))
p1
PrintBehPLS_CIs <- read.csv("~/Dropbox/Papers/a40PLS/PrintBehPLS_CIs.csv")
levels(PrintBehPLS_CIs$condition) <- gsub(" ", "\n", levels(PrintBehPLS_CIs$condition))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = PrintBehPLS_CIs$ul,
ymin = PrintBehPLS_CIs$ll)
PrintBehPLS_CIs$Condition <- factor(PrintBehPLS_CIs$condition, as.character(PrintBehPLS_CIs$condition))
p <- ggplot(data = PrintBehPLS_CIs, aes(x = condition, y = corr))
p2 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=12))
p2
p2 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=18))
p2
install.packages(c("acepack", "afex", "akima", "arm", "assertthat", "BH", "boot", "broom", "car", "caret", "chron", "cluster", "coda", "codetools", "coin", "colorspace", "corpcor", "cowplot", "curl", "data.table", "DBI", "DEoptimR", "devtools", "digest", "dplyr", "e1071", "effects", "estimability", "evaluate", "ez", "flexmix", "foreign", "formatR", "gdata", "GGally", "git2r", "gss", "Hmisc", "htmltools", "htmlwidgets", "irlba", "jsonlite", "kernlab", "knitr", "lattice", "leaps", "lme4", "lmtest", "lsmeans", "maps", "markdown", "MASS", "Matrix", "mclust", "memoise", "mgcv", "miscTools", "mnormt", "mvoutlier", "mvtnorm", "nlme", "NLP", "openssl", "pbkrtest", "pcaPP", "pls", "psych", "pwr", "quantreg", "R6", "Rcmdr", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rmarkdown", "robCompositions", "robustbase", "rpart", "rrcov", "sem", "sfsmisc", "shiny", "slam", "snow", "sourcetools", "sp", "SparseM", "stabledist", "statmod", "stringi", "stringr", "survival", "TH.data", "tibble", "tidyr", "tm", "vcd", "VIM", "XLConnect", "XLConnectJars", "XML", "yaml", "zoo"))
install.packages(c("acepack", "afex", "akima", "arm", "assertthat", "BH", "boot", "broom", "car", "caret", "chron", "cluster", "coda", "codetools", "coin", "colorspace", "corpcor", "cowplot", "curl", "data.table", "DBI", "DEoptimR", "devtools", "digest", "dplyr", "e1071", "effects", "estimability", "evaluate", "ez", "flexmix", "foreign", "formatR", "gdata", "GGally", "git2r", "gss", "Hmisc", "htmltools", "htmlwidgets", "irlba", "jsonlite", "kernlab", "knitr", "lattice", "leaps", "lme4", "lmtest", "lsmeans", "maps", "markdown", "MASS", "Matrix", "mclust", "memoise", "mgcv", "miscTools", "mnormt", "mvoutlier", "mvtnorm", "nlme", "NLP", "openssl", "pbkrtest", "pcaPP", "pls", "psych", "pwr", "quantreg", "R6", "Rcmdr", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rmarkdown", "robCompositions", "robustbase", "rpart", "rrcov", "sem", "sfsmisc", "shiny", "slam", "snow", "sourcetools", "sp", "SparseM", "stabledist", "statmod", "stringi", "stringr", "survival", "TH.data", "tibble", "tidyr", "tm", "vcd", "VIM", "XLConnect", "XLConnectJars", "XML", "yaml", "zoo"))
install.packages(c("acepack", "afex", "akima", "arm", "assertthat", "BH", "boot", "broom", "car", "caret", "chron", "cluster", "coda", "codetools", "coin", "colorspace", "corpcor", "cowplot", "curl", "data.table", "DBI", "DEoptimR", "devtools", "digest", "dplyr", "e1071", "effects", "estimability", "evaluate", "ez", "flexmix", "foreign", "formatR", "gdata", "GGally", "git2r", "gss", "Hmisc", "htmltools", "htmlwidgets", "irlba", "jsonlite", "kernlab", "knitr", "lattice", "leaps", "lme4", "lmtest", "lsmeans", "maps", "markdown", "MASS", "Matrix", "mclust", "memoise", "mgcv", "miscTools", "mnormt", "mvoutlier", "mvtnorm", "nlme", "NLP", "openssl", "pbkrtest", "pcaPP", "pls", "psych", "pwr", "quantreg", "R6", "Rcmdr", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rmarkdown", "robCompositions", "robustbase", "rpart", "rrcov", "sem", "sfsmisc", "shiny", "slam", "snow", "sourcetools", "sp", "SparseM", "stabledist", "statmod", "stringi", "stringr", "survival", "TH.data", "tibble", "tidyr", "tm", "vcd", "VIM", "XLConnect", "XLConnectJars", "XML", "yaml", "zoo"))
install.packages(c("BH", "boot", "car", "checkmate", "coin", "cowplot", "curl", "devtools", "dplyr", "evaluate", "Formula", "GGally", "git2r", "htmlwidgets", "httpuv", "httr", "igraph", "knitr", "Matrix", "mgcv", "NLP", "pcaPP", "Rcpp", "reshape", "rlang", "robCompositions", "Rvmmin", "sandwich", "scales", "shiny", "sp", "tibble", "tidyr", "withr"))
?sample.int
?rnorm
rnorm(40, mean = 272, sd = 4538)
as.integer(rnorm(40, mean = 272, sd = 4538))
hist(as.integer(rnorm(40, mean = 272, sd = 4538)))
hist(as.integer(rnorm(40, mean = 272, sd = 4538)))
hist(as.integer(rnorm(40, mean = 272, sd = 4538)))
hist(as.integer(rnorm(40, mean = 272, sd = 4538)))
hist(as.integer(rnorm(40, mean = 272, sd = 4538)))
hist(as.integer(rnorm(40, mean = 272, sd = 4538)))
hist(as.integer(rnorm(40, mean = 272, sd = 4538)))
ii.freq <- as.integer(rnorm(40, mean = 272, sd = 4538))
ii.or <- as.integer(rnorm(40, mean = 153, sd = 4538))
rb.freq <- as.integer(rnorm(40, mean = 260, sd = 75))
ii.or <- as.integer(rnorm(40, mean = 125, sd = 9000))
ii.freq <- as.integer(rnorm(40, mean = 272, sd = 4538))
ii.or <- as.integer(rnorm(40, mean = 153, sd = 4538))
rb.freq <- as.integer(rnorm(40, mean = 260, sd = 75))
rb.or <- as.integer(rnorm(40, mean = 125, sd = 9000))
test <- cbind(ii.freq, ii.or, rb.freq, rb.or)
View(test)
ii.freq <- as.integer(rnorm(40, mean = 272, sd = 4538))
ii.or <- as.integer(rnorm(40, mean = 153, sd = 4538))
rb.freq <- as.integer(rnorm(40, mean = 260, sd = 75))
rb.or <- as.integer(rnorm(40, mean = 125, sd = 9000))
params <- cbind(ii.freq, ii.or, rb.freq, rb.or)
View(params)
ii.freq <- as.integer(rnorm(40, mean = 272, sd = 4538))
ii.freq = .25*(ii.freq/50)
??"pi"
ii.or <- ii.or*(pi/500)
ii.freq <- as.integer(rnorm(40, mean = 272, sd = 4538))
ii.freq = .25*(ii.freq/50)
ii.or <- as.integer(rnorm(40, mean = 153, sd = 4538))
ii.or <- ii.or*(pi/500)
rb.freq <- as.integer(rnorm(40, mean = 260, sd = 75))
rb.freq = .25*(rb.freq/50)
rb.or <- as.integer(rnorm(40, mean = 125, sd = 9000))
rb.or <- rb.or*(pi/500)
params <- cbind(ii.freq, ii.or, rb.freq, rb.or)
ii.freq <- as.integer(rnorm(40, mean = 272, sd = 4538))
ii.freq = .25*(ii.freq/50)
ii.or <- as.integer(rnorm(40, mean = 153, sd = 4538))
ii.or <- ii.or*(pi/500)
rb.freq <- as.integer(rnorm(40, mean = 260, sd = 75))
rb.freq = .25*(rb.freq/50)
rb.or <- as.integer(rnorm(40, mean = 125, sd = 9000))
rb.or <- rb.or*(pi/500)
params <- cbind(ii.freq, ii.or, rb.freq, rb.or)
write.csv(params, "PatchParamters.csv")
setwd("~/dissertation/CategorizationExps/Ashby")
# Parameters taken from Maddox, Ashby, & Bohil (2003)
setwd("~/dissertation/CategorizationExps/Ashby")
ii.freq <- as.integer(rnorm(40, mean = 272, sd = 4538))
ii.freq = .25*(ii.freq/50)
ii.or <- as.integer(rnorm(40, mean = 153, sd = 4538))
ii.or <- ii.or*(pi/500)
rb.freq <- as.integer(rnorm(40, mean = 260, sd = 75))
rb.freq = .25*(rb.freq/50)
rb.or <- as.integer(rnorm(40, mean = 125, sd = 9000))
rb.or <- rb.or*(pi/500)
params <- cbind(ii.freq, ii.or, rb.freq, rb.or)
write.csv(params, "PatchParamters.csv")
