# import psychopy modules
import psychopy
from psychopy import visual, core, event, sound, gui, data, logging
# import math (for rounding function)
import math
import numpy as np 
import random
import pandas as pd

#set parent directory
parent_dir = "./"

#get some startup information from the user
info = {'ID Number':'', 'Order': ''}
dlg = gui.DlgFromDict(info, title='Category Learning Task')
if not dlg.OK:
    core.quit()

#### Code for selecting the block order
#create dictionary for which type of block matches to which number
block = {1: "UnsupervisedSparse", 2: "UnsupervisedDense", 3: "SupervisedSparse", 4: "SupervisedDense"}
# create dictionary that allows you to run in order
order = {1: "Block1", 2: "Block2", 3: "Block3", 4: "Block4"}
# read in whole order spreadsheet
order_list = pd.read_table('blockOrders.csv', sep=',')
# select the row that has the order entered in initially
sel_order = order_list.loc[order_list['Order'] == int(info['Order'])]


#### EXPERIMENT SETUP
#set log prefixes
prefix = 'sub-%s_order%s' % (info['ID Number'], info['Order'])
#logging data 
errorLog=logging.LogFile(prefix + "_errorlog.log", level=logging.DATA, filemode='w')

def check_exit():
#abort if esc was pressed
    if event.getKeys('escape'):
        win.close()
        core.quit()

#create clock
globalClock = core.Clock()
logging.setDefaultClock(globalClock)

#info about the screen
win = visual.Window(size = [1440,900],
                    color = "white",
                    fullscr = True, allowGUI=False,
                    units = "pix")

block_instr = "BLANK"
instruct_txt = visual.TextStim(win, text = "In this experiment you will be learning new items.\n" + block_instr + "\nPress SPACE when you are ready to continue.",
                        pos = [0.0,0.0],
                        color = "black",
                        height = 32,
                        alignHoriz='center',
                        alignVert='center',
                        font = "Arial",
                        wrapWidth= 1400,
                        autoLog=True)

blockInstr = pd.read_table('blockInstr.csv', sep=',')

# header for data log
data = np.hstack(("Block","StimType", "Stimulus", "KEY", "RESP", "Accuracy", "RT"))

yesresp = {"UnsupervisedSparse":"Allied", "UnsupervisedDense":"Friendly", "SupervisedSparse":"Eat Garden", "SupervisedDense":"Will Like"}
noresp = {"UnsupervisedSparse":"Enemy", "UnsupervisedDense":"Aggressive", "SupervisedSparse":"Won't Eat Garden", "SupervisedDense":"Won't Like"}

#### EXPERIMENT RUNNING
# run through the blocks in order
for i in range(1, 5):
    blockName = block[sel_order.iloc[0][order[i]]]
    sel_instr = blockInstr.loc[blockInstr['BlockName'] == blockName, 'Instr']
    block_instr = sel_instr.iloc[0][0:]
    instruct_txt.text = "In this experiment you will be learning new items.\n \n" + block_instr + "\n \nPress SPACE when you are ready to continue."
    #showing instructions first 
    instruct_txt.draw()
    win.flip() 
    #waiting for space bar to continue
    keys =event.waitKeys(keyList=['space'], timeStamped=globalClock)
    #### NEED TO ADD TRAINING HERE
    # in the data source, there are two columns: StimType, Stim
    # load in our stimulus file
    TRIAL_LIST = psychopy.data.importConditions(fileName = "%s_test.xlsx" % (blockName))
    totalTrials = len(TRIAL_LIST)
    TRIAL_LIST_RAND = TRIAL_LIST
    random.shuffle(TRIAL_LIST_RAND)
    for index in range(len(TRIAL_LIST_RAND)):
        stim = visual.ImageStim(win, pos = [0,0], size = [600,600], image = parent_dir + TRIAL_LIST_RAND[index]['Stim'] + ".png")
        keypress = visual.TextStim(win,
        text = "X - " + yesresp[blockName] + "            " + "N - " + noresp[blockName],
        pos = [0.0,-400],
        color = "black", height = 32, alignHoriz='center', alignVert='center',
        font = "Arial", autoLog=True, wrapWidth= 1200)
        stim.draw()
        keypress.draw()
        win.flip()


# close everything
#win.close()
#core.quit()