pwr.anova.test(k = 3, f = .328, sig.level = .05, power = .90)
pwr.anova.test(k = 3, f = .433, sig.level = .05, power = .95)
pwr.t.test(d = .433 , sig.level = .05, power = .95, type = "two.sample")
install.packages("statmod")
install.packages("Matrix")
install.packages("gss")
pwr.t.test(d = .116, sig.level = .05, power = .8, type = c("two.sample"))
library(pwr)
install.packages("pwr")
pwr.t.test(d = .116, sig.level = .05, power = .8, type = c("two.sample"))
library(pwr)
pwr.t.test(d = .116, sig.level = .05, power = .8, type = c("two.sample"))
pwr.anova.test(k = 2, n = , f = .116, sig.level = .05, power = )
pwr.anova.test(k = 2, n = , f = .116, sig.level = .05, power = .8)
pwr.t.test(d = .52, sig.level = .05, power = .8, type = c("two.sample"))
pwr.t.test(d = .78, sig.level = .05, power = .8, type = c("two.sample"))
task <- c("Spoken Passage","Printed Passage","Printed Word","Spoken Word","FalseFont","Vocod")
lv1 <- c(0.4637576, -0.59954679, -0.28089342, 0.36649972, -0.29970777, 0.34989238)
Task_lv1 <- data.frame(task,lv1)
lv2 <- c(0.60210228, 0.54165232, -0.34560081, -0.21191415, -0.35595566, -0.23029119)
Task_lv2 <- data.frame(task, lv2)
lv3 <- c(0.50383562, -0.42238966, 0.27937683, -0.43053114, 0.42337403, -0.35367078)
Task_lv3 <- data.frame(task, lv3)
levels(Task_lv1$task) <- gsub(" ", "\n", levels(Task_lv1$task))
levels(Task_lv2$task) <- gsub(" ", "\n", levels(Task_lv2$task))
levels(Task_lv3$task) <- gsub(" ", "\n", levels(Task_lv3$task))
print <-c("Printed Passage", "Printed Word")
plv <- c(.8225, 0.68522084)
print_beh <- data.frame(print, plv)
levels(print_beh$print) <- gsub(" ", "\n", levels(print_beh$print))
story <-c("Spoken Passage", "Printed Passage")
slv <- c(0.8698824, 0.84048808)
story_beh <- data.frame(story, slv)
levels(story_beh$story) <- gsub(" ", "\n", levels(story_beh$story))
fastloc <-c("Printed Word","Spoken Word")
fllv <-c(-0.4397,0.6422)
fastloc_beh <-data.frame(fastloc, fllv)
levels(fastloc_beh$fastloc) <- gsub(" ", "\n", levels(fastloc_beh$fastloc))
#set color scheme so each condition has the same color in each plot
group.colors <- c(Audio = "#E69F00", Visual = "#56B4E9", Print ="#009E73", Speech = "#F0E442", FalseFont = "#0072B2", Vocod = "#CC79A7")
#create a factor so that bars will be in the order from the dataframe, not alphabetical
Task_lv1$task2 <- factor(Task_lv1$task, as.character(Task_lv1$task))
#make a bar plot with a line at 0
ggplot(data=Task_lv1, aes(x=task2, y=lv1)) +
geom_bar(stat="identity") + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x="Task", y="Design Score") + theme_classic() +
theme(text = element_text(size=20))
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ggplot(data=Task_lv1, aes(x=task2, y=lv1)) +
geom_bar(stat="identity") + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x="Task", y="Design Score") + theme_classic() +
theme(text = element_text(size=20))
ggplot(data=Task_lv1, aes(x=task2, y=lv1)) +
geom_bar(stat="identity") + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x="Task", y="Design Score") + theme_classic() +
theme(text = element_text(size=26))
TaskPLS_CIs <- read.csv("~/Dropbox/Papers/a40PLS/TaskPLS_CIs.csv")
TaskPLS_CIs <- TaskPLS_CIs[-c(19:36),-c(6:14)]
LV1 <- subset(TaskPLS_CIs, LV == 1)
LV2 <- subset(TaskPLS_CIs, LV == 2)
LV3 <- subset(TaskPLS_CIs, LV == 3)
levels(LV1$Condition) <- gsub(" ", "\n", levels(LV1$Condition))
levels(LV2$Condition) <- gsub(" ", "\n", levels(LV2$Condition))
levels(LV3$Condition) <- gsub(" ", "\n", levels(LV3$Condition))
library(ggplot2)
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = LV1$ul,
ymin = LV1$ll)
LV1$Condition <- factor(LV1$Condition, as.character(LV1$Condition))
p <- ggplot(data = LV1, aes(x = Condition, y = score))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=16))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=24))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=18))
ymin = LV2$ll)
LV2$Condition <- factor(LV2$Condition, as.character(LV2$Condition))
p <- ggplot(data = LV2, aes(x = Condition, y = score))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=18))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = LV2$ul,
ymin = LV2$ll)
LV2$Condition <- factor(LV2$Condition, as.character(LV2$Condition))
p <- ggplot(data = LV2, aes(x = Condition, y = score))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=18))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = LV3$ul,
ymin = LV3$ll)
LV3$Condition <- factor(LV3$Condition, as.character(LV3$Condition))
p <- ggplot(data = LV3, aes(x = Condition, y = score))
p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="Brain Score") + theme_classic() +
theme(text = element_text(size=16))
levels(StoryBehPLS_CIs$condition) <- gsub(" ", "\n", levels(StoryBehPLS_CIs$condition))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = StoryBehPLS_CIs$ul,
ymin = StoryBehPLS_CIs$ll)
StoryBehPLS_CIs$Condition <- factor(StoryBehPLS_CIs$condition, as.character(StoryBehPLS_CIs$condition))
p <- ggplot(data = StoryBehPLS_CIs, aes(x = condition, y = corr))
p1 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=12))
p1
StoryBehPLS_CIs <- read.csv("~/Dropbox/Papers/a40PLS/StoryBehPLS_CIs.csv")
levels(StoryBehPLS_CIs$condition) <- gsub(" ", "\n", levels(StoryBehPLS_CIs$condition))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = StoryBehPLS_CIs$ul,
ymin = StoryBehPLS_CIs$ll)
StoryBehPLS_CIs$Condition <- factor(StoryBehPLS_CIs$condition, as.character(StoryBehPLS_CIs$condition))
p <- ggplot(data = StoryBehPLS_CIs, aes(x = condition, y = corr))
p1 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=12))
p1
p1 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=18))
p1
PrintBehPLS_CIs <- read.csv("~/Dropbox/Papers/a40PLS/PrintBehPLS_CIs.csv")
levels(PrintBehPLS_CIs$condition) <- gsub(" ", "\n", levels(PrintBehPLS_CIs$condition))
dodge <- position_dodge(width = 0.3)
limits <- aes(ymax = PrintBehPLS_CIs$ul,
ymin = PrintBehPLS_CIs$ll)
PrintBehPLS_CIs$Condition <- factor(PrintBehPLS_CIs$condition, as.character(PrintBehPLS_CIs$condition))
p <- ggplot(data = PrintBehPLS_CIs, aes(x = condition, y = corr))
p2 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=12))
p2
p2 <- p + geom_bar(stat = "identity", position = dodge, color='black') +
geom_errorbar(limits, position = dodge, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) + guides(fill=FALSE) +
geom_abline(intercept=0, slope=0) + labs(x = "", y="RC Correlation") + theme_classic() +
theme(text = element_text(size=18))
p2
install.packages(c("acepack", "afex", "akima", "arm", "assertthat", "BH", "boot", "broom", "car", "caret", "chron", "cluster", "coda", "codetools", "coin", "colorspace", "corpcor", "cowplot", "curl", "data.table", "DBI", "DEoptimR", "devtools", "digest", "dplyr", "e1071", "effects", "estimability", "evaluate", "ez", "flexmix", "foreign", "formatR", "gdata", "GGally", "git2r", "gss", "Hmisc", "htmltools", "htmlwidgets", "irlba", "jsonlite", "kernlab", "knitr", "lattice", "leaps", "lme4", "lmtest", "lsmeans", "maps", "markdown", "MASS", "Matrix", "mclust", "memoise", "mgcv", "miscTools", "mnormt", "mvoutlier", "mvtnorm", "nlme", "NLP", "openssl", "pbkrtest", "pcaPP", "pls", "psych", "pwr", "quantreg", "R6", "Rcmdr", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rmarkdown", "robCompositions", "robustbase", "rpart", "rrcov", "sem", "sfsmisc", "shiny", "slam", "snow", "sourcetools", "sp", "SparseM", "stabledist", "statmod", "stringi", "stringr", "survival", "TH.data", "tibble", "tidyr", "tm", "vcd", "VIM", "XLConnect", "XLConnectJars", "XML", "yaml", "zoo"))
install.packages(c("acepack", "afex", "akima", "arm", "assertthat", "BH", "boot", "broom", "car", "caret", "chron", "cluster", "coda", "codetools", "coin", "colorspace", "corpcor", "cowplot", "curl", "data.table", "DBI", "DEoptimR", "devtools", "digest", "dplyr", "e1071", "effects", "estimability", "evaluate", "ez", "flexmix", "foreign", "formatR", "gdata", "GGally", "git2r", "gss", "Hmisc", "htmltools", "htmlwidgets", "irlba", "jsonlite", "kernlab", "knitr", "lattice", "leaps", "lme4", "lmtest", "lsmeans", "maps", "markdown", "MASS", "Matrix", "mclust", "memoise", "mgcv", "miscTools", "mnormt", "mvoutlier", "mvtnorm", "nlme", "NLP", "openssl", "pbkrtest", "pcaPP", "pls", "psych", "pwr", "quantreg", "R6", "Rcmdr", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rmarkdown", "robCompositions", "robustbase", "rpart", "rrcov", "sem", "sfsmisc", "shiny", "slam", "snow", "sourcetools", "sp", "SparseM", "stabledist", "statmod", "stringi", "stringr", "survival", "TH.data", "tibble", "tidyr", "tm", "vcd", "VIM", "XLConnect", "XLConnectJars", "XML", "yaml", "zoo"))
install.packages(c("acepack", "afex", "akima", "arm", "assertthat", "BH", "boot", "broom", "car", "caret", "chron", "cluster", "coda", "codetools", "coin", "colorspace", "corpcor", "cowplot", "curl", "data.table", "DBI", "DEoptimR", "devtools", "digest", "dplyr", "e1071", "effects", "estimability", "evaluate", "ez", "flexmix", "foreign", "formatR", "gdata", "GGally", "git2r", "gss", "Hmisc", "htmltools", "htmlwidgets", "irlba", "jsonlite", "kernlab", "knitr", "lattice", "leaps", "lme4", "lmtest", "lsmeans", "maps", "markdown", "MASS", "Matrix", "mclust", "memoise", "mgcv", "miscTools", "mnormt", "mvoutlier", "mvtnorm", "nlme", "NLP", "openssl", "pbkrtest", "pcaPP", "pls", "psych", "pwr", "quantreg", "R6", "Rcmdr", "Rcpp", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rmarkdown", "robCompositions", "robustbase", "rpart", "rrcov", "sem", "sfsmisc", "shiny", "slam", "snow", "sourcetools", "sp", "SparseM", "stabledist", "statmod", "stringi", "stringr", "survival", "TH.data", "tibble", "tidyr", "tm", "vcd", "VIM", "XLConnect", "XLConnectJars", "XML", "yaml", "zoo"))
install.packages(c("BH", "boot", "car", "checkmate", "coin", "cowplot", "curl", "devtools", "dplyr", "evaluate", "Formula", "GGally", "git2r", "htmlwidgets", "httpuv", "httr", "igraph", "knitr", "Matrix", "mgcv", "NLP", "pcaPP", "Rcpp", "reshape", "rlang", "robCompositions", "Rvmmin", "sandwich", "scales", "shiny", "sp", "tibble", "tidyr", "withr"))
setwd("~/dissertation/CatLearningfMRI/OrderPilot")
data <- read.csv("MergeExport.csv")
View(data)
names(date)
names(data)
data <- read.csv("MergeExport.csv")
rel.data <- data[,c(2,17,23,32,35,44,47,59,62,71,74)]
View(rel.data)
ds <- rel.data[!is.na(rel.data$DSTestStim.ACC)]
ds <- rel.data[!is.na(rel.data$DSTestStim.ACC),]
View(ds)
du <- rel.data[!is.na(rel.data$DUTestStim.ACC),]
ss <- rel.data[!is.na(rel.data$SSTestStim.ACC),]
su <- rel.data[!is.na(rel.data$SUTestStim.ACC),]
colSums(du) == 0
colSums(du)
colSums(du, na.rm = TRUE)
modifyList <- list(ds, du, ss, su)
colSums(ds, na.rm = TRUE) == 0
ds[,colSums(ds, na.rm = TRUE) != 0]
for (i in len(modifyList)) {
modifyList[[i]] <- modifyList[[i]][,colSums(modifyList[[i]], na.rm = TRUE) != 0]
}
for (i in length(modifyList)) {
modifyList[[i]] <- modifyList[[i]][,colSums(modifyList[[i]], na.rm = TRUE) != 0]
}
for (i in 1:length(modifyList)) {
modifyList[[i]] <- modifyList[[i]][,colSums(modifyList[[i]], na.rm = TRUE) != 0]
}
head(modifyList[[1]])
ds <- ds[ds$Subject != 666,]
View(ds)
names(modifyList)
names(modifyList) <- c("ds", "du", "ss", "su")
for (i in 1:length(modifyList)) {
modifyList[[i]] <- modifyList[[i]][,colSums(modifyList[[i]], na.rm = TRUE) != 0]
names(modifyList[[i]]) <- c("Subject", "Block", "Trial", "ACC", "RT")
modifyList[[i]] <- modifyList[[i]][modifyList[[i]]$Subject != 666]
modifyList[[i]]$type <- name(modifyList[[i]])
}
names(modifyList) <- c("ds", "du", "ss", "su")
for (i in 1:length(modifyList)) {
modifyList[[i]] <- modifyList[[i]][,colSums(modifyList[[i]], na.rm = TRUE) != 0]
names(modifyList[[i]]) <- c("Subject", "Block", "Trial", "ACC", "RT")
modifyList[[i]] <- modifyList[[i]][modifyList[[i]]$Subject != 666,]
modifyList[[i]]$type <- name(modifyList[[i]])
}
for (i in 1:length(modifyList)) {
modifyList[[i]] <- modifyList[[i]][,colSums(modifyList[[i]], na.rm = TRUE) != 0]
names(modifyList[[i]]) <- c("Subject", "Block", "Trial", "ACC", "RT")
modifyList[[i]] <- modifyList[[i]][modifyList[[i]]$Subject != 666,]
modifyList[[i]]$type <- names(modifyList[[i]])
}
head(modifyList[[1]])
names(modifyList[1])
modifyList <- list(ds, du, ss, su)
names(modifyList) <- c("ds", "du", "ss", "su")
for (i in 1:length(modifyList)) {
modifyList[[i]] <- modifyList[[i]][,colSums(modifyList[[i]], na.rm = TRUE) != 0]
names(modifyList[[i]]) <- c("Subject", "Block", "Trial", "ACC", "RT")
modifyList[[i]] <- modifyList[[i]][modifyList[[i]]$Subject != 666,]
modifyList[[i]]$type <- names(modifyList[i])
}
head(modifyList[[1]])
list2env(modifyList)
View(ds)
list2env(modifyList, envir=.GlobalEnv)
View(ds)
all <- rbind(ds,du,ss,su)
head(all)
library(ggplot2)
?tapply
test<- data.frame(tapply(all$ACC, list(all$Subject, all$type), mean, na.rm = TRUE))
View(test)
duplicated(all[,c(2,6)])
duplicated(all[,c(2,3,6)])
test <- all[duplicated(all[,c(2,3,6)])]
test <- all[duplicated(all[,c(2,3,6)]),]
View(test)
tapply(test$Block, test$Subject, min)
table(test$Block[test$Subject == 9003,])
table(test$Block[test$Subject == 9003])
table(test$Block[test$Subject == 9004])
test2<- data.frame(tapply(all$ACC, list(all$Subject, all$type), mean, na.rm = TRUE))
View(test2)
test <- all[duplicated(all[,c(1,2,3,6)]),]
View(test)
tapply(test$Block, test$Subject, min)
test <- all[duplicated(all[,c(1,3,6)]),]
View(test)
tapply(test$Block, test$Subject, min)
table(test$Block[test$Subject == 9004])
table(test$Block[test$Subject == 9003])
table(test$Block[test$Subject == 9011])
library(dplyr)
all %>% distinct(Subject, Trial, type, .keep_all = TRUE)
test <- all %>% distinct(Subject, Trial, type, .keep_all = TRUE)
View(test)
?duplicated
duplicated(all[,c(1,3,6)])
test <- all[duplicated(all[,c(1,3,6)]),]
tapply(test$Block, test$Subject, min)
table(test$type)
test <- all[!duplicated(all[,c(1,3,6)]),]
test <- all[duplicated(all[,c(1,3,6)]),]
test2 <- all[!duplicated(all[,c(1,3,6)]),]
1240+5480
pd <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
all.nd <- all[!duplicated(all[,c(1,3,6)]),]
pd <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
View(pd)
pd.rt <- data.frame(tapply(all.nd$RT, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
pd.acc <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
pd.rt <- data.frame(tapply(all.nd$RT, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
p1 <- ggplot(pd.acc, aes(type, ACC)) + geom_violin()
p1
names(pd.acc)
View(pd.acc)
?melt
??melt
library(reshape)
pd.acc2 <- melt.data.frame(pd.acc)
View(pd.acc2)
names(pd.acc2) <- c("Condition", "ACC")
pd.acc <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
pd.acc2 <- melt.data.frame(pd.acc)
names(pd.acc2) <- c("Condition", "ACC")
pd.rt <- data.frame(tapply(all.nd$RT, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
pd.rt2 <- melt.data.frame(pd.rt)
names(pd.rt2) <- c("Condition", "RT")
p1 <- ggplot(pd.acc2, aes(Condition, ACC)) + geom_violin()
p1
p1 <- ggplot(pd.rt2, aes(Condition, RT)) + geom_violin()
p1
all.nd$Block <- as.factor(all.nd$Block)
m1 <- lme(ACC ~ 1 + (1|Subject), data = all.nd)
summary(m1)
m1 <- lmer(ACC ~ 1 + (1|Subject), data = all.nd)
summary(m1)
??"lmer"
library(lme4)
m1 <- lmer(ACC ~ 1 + (1|Subject), data = all.nd)
summary(m1)
m1 <- lmer(ACC ~ Block + (1|Subject), data = all.nd)
summary(m1)
anova(m1)
m1 <- lm(ACC ~ Block + (1|Subject), data = all.nd)
summary(m1)
anova(m1)
library(nlme)
m1 <- lme(ACC ~ Block, random = ~1|Subj, data = acc.full)
summary(m1)
anova(m1)
m1 <- lme(RT ~ Block, random = ~1|Subj, data = acc.full)
summary(m1)
anova(m1)
p1 <- ggplot(pd.acc2, aes(Condition, ACC)) + geom_line()
p1
p1 <- ggplot(pd.acc2, aes(Block, ACC))
p1
pd.acc3 <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$Block), mean, na.rm = TRUE))
pd.acc4 <- melt.data.frame(pd.acc3)
names(pd.acc4) <- c("Block", "ACC")
p1 <- ggplot(pd.acc4, aes(Block, ACC))
p1
p1 <- ggplot(pd.acc4, aes(Block, ACC)) + geom_point()
p1
p1 <- ggplot(pd.acc4, aes(Block, ACC)) + geom_point() + geom_line()
p1
pd.acc4$Subject <- rownames(pd.acc4)
head(pd.acc4)
View(pd.acc3)
pd.acc3$Subject <- rownames(pd.acc3)
pd.acc4 <- melt.data.frame(pd.acc3)
View(pd.acc4)
names(pd.acc4) <- c("Subject", "Block", "ACC")
p1 <- ggplot(pd.acc4, aes(Block, ACC, group = Subject)) + geom_point() + geom_line()
p1
p1 <- ggplot(pd.acc4, aes(Block, ACC, group = Subject, color = Subject)) + geom_point() + geom_line()
p1
data$Session == 23
data[data$Session != 1,]
data[data$Session == 1,]
data <- data[data$Session == 1,]
rel.data <- data[,c(2,17,23,32,35,44,47,59,62,71,74)]
ds <- rel.data[!is.na(rel.data$DSTestStim.ACC),]
du <- rel.data[!is.na(rel.data$DUTestStim.ACC),]
ss <- rel.data[!is.na(rel.data$SSTestStim.ACC),]
su <- rel.data[!is.na(rel.data$SUTestStim.ACC),]
modifyList <- list(ds, du, ss, su)
names(modifyList) <- c("ds", "du", "ss", "su")
library(ggplot2)
library(reshape)
library(nlme)
setwd("~/dissertation/CatLearningfMRI/OrderPilot")
data <- read.csv("MergeExport.csv")
data <- data[data$Session == 1,]
rel.data <- data[,c(2,17,23,32,35,44,47,59,62,71,74)]
ds <- rel.data[!is.na(rel.data$DSTestStim.ACC),]
du <- rel.data[!is.na(rel.data$DUTestStim.ACC),]
ss <- rel.data[!is.na(rel.data$SSTestStim.ACC),]
su <- rel.data[!is.na(rel.data$SUTestStim.ACC),]
modifyList <- list(ds, du, ss, su)
names(modifyList) <- c("ds", "du", "ss", "su")
for (i in 1:length(modifyList)) {
modifyList[[i]] <- modifyList[[i]][,colSums(modifyList[[i]], na.rm = TRUE) != 0]
names(modifyList[[i]]) <- c("Subject", "Block", "Trial", "ACC", "RT")
modifyList[[i]] <- modifyList[[i]][modifyList[[i]]$Subject != 666,]
modifyList[[i]]$type <- names(modifyList[i])
}
list2env(modifyList, envir=.GlobalEnv)
all <- rbind(ds,du,ss,su)
all.nd <- all[!duplicated(all[,c(1,3,6)]),]
pd.acc <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
pd.acc2 <- melt.data.frame(pd.acc)
names(pd.acc2) <- c("Condition", "ACC")
pd.acc3 <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$Block), mean, na.rm = TRUE))
pd.acc3$Subject <- rownames(pd.acc3)
pd.acc4 <- melt.data.frame(pd.acc3)
names(pd.acc4) <- c("Subject", "Block", "ACC")
pd.rt <- data.frame(tapply(all.nd$RT, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
pd.rt2 <- melt.data.frame(pd.rt)
names(pd.rt2) <- c("Condition", "RT")
ordervals <- read.csv("Order.csv")
all.merge <- merge(all, ordervals, by = "Subject")
View(all.merge)
all.nd <- all.merge[!duplicated(all.merge[,c(1,3,6)]),]
pd.acc <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
pd.acc2 <- melt.data.frame(pd.acc)
names(pd.acc2) <- c("Condition", "ACC")
pd.acc3 <- data.frame(tapply(all.nd$ACC, list(all.nd$Subject, all.nd$Block), mean, na.rm = TRUE))
pd.acc3$Subject <- rownames(pd.acc3)
pd.acc4 <- melt.data.frame(pd.acc3)
names(pd.acc4) <- c("Subject", "Block", "ACC")
pd.rt <- data.frame(tapply(all.nd$RT, list(all.nd$Subject, all.nd$type), mean, na.rm = TRUE))
pd.rt2 <- melt.data.frame(pd.rt)
names(pd.rt2) <- c("Condition", "RT")
names(acc.full)
all.nd$Block <- as.factor(all.nd$Block)
m1 <- lme(ACC ~ Block, random = ~1|Subj, data = all.nd)
summary(m1)
anova(m1)
m1 <- lme(ACC ~ Block, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
m1 <- lme(RT ~ Block, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
m1 <- lme(ACC ~ Block, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
names(all.nd)
m1 <- lme(ACC ~ StimOrder, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
m1 <- lme(ACC ~ TrainOrder, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
m1 <- lme(ACC ~ SupervisedOrder, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
m1 <- lme(ACC ~ UnsupervisedOrder, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
m1 <- lme(ACC ~ SparseOrder, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
m1 <- lme(ACC ~ DenseOrder, random = ~1|Subject, data = all.nd)
summary(m1)
anova(m1)
volumeVars = names(ordervals)
models = lapply(ordervals, function(x) {lme(substitute(ACC ~  i, list(i=as.name(x)) ), random = ~1|Subject, data=all.nd)})
models = lapply(ordervals, function(x) { lme( substitute(ACC ~  i, list(i=as.name(x)) ), random = ~1|Subject, data=all.nd)})
models = lapply(ordervals, function(x) { lme( eval(substitute(ACC ~  i, list(i=as.name(x)) )), random = ~1|Subject, data=all.nd)})
models = lapply(volumeVars, function(x) { lme( eval(substitute(ACC ~  i, list(i=as.name(x)) )), random = ~1|Subject, data=all.nd)})
lapply(models, function(y) { print(summary(y)); anova(y)})
lappy(models, function(y) { print(y)})
lapply(models, function(y) { print(y)})
lapply(models, function(y) { print(y$call)})
m1$formula
formula(m1)
lapply(models, function(y) { formula(y)})
formula(models)
volumeVars = names(ordervals[-1])
models = lapply(volumeVars, function(x) { lme( eval(substitute(ACC ~  i, list(i=as.name(x)) )), random = ~1|Subject, data=all.nd)})
lapply(models, function(y) { print(y); print(summary(y)); anova(y)})
head(models)
names(all.nd)
levels(all.nd$type)
us.only <- all.nd[all.nd$type == "du" | all.nd$type == "su",]
p1 <- ggplot(us.only, aes(UnsupervisedOrder, ACC)) + geom_violin()
p1
head(us.only)
?cast
cast(us.only, subject ~ type)
cast(us.only, Subject ~ type)
cast(us.only, Subject ~ type, value.var =ACC)
names(aCC)
names(us.only)
dcast(data = us.only,formula = Subject~type,fun.aggregate = identity,value.var = "value")
library(reshape2)
dcast(data = us.only,formula = Subject~type,fun.aggregate = identity,value.var = "value")
dcast(data = us.only,formula = Subject~type,fun.aggregate = identity,value.var = "ACC")
dcast(data = us.only,formula = Subject~type,fun.aggregate = mean,value.var = "ACC")
acc.rt <- dcast(data = us.only,formula = Subject~type,fun.aggregate = mean,value.var = "RT")
acc.us <- dcast(data = us.only,formula = Subject~type,fun.aggregate = mean,value.var = "ACC")
t.test(acc.us$du, acc.us$su)
us.dfirst <- us.only[us.only$UnsupervisedOrder == "UnsupervisedFirst"]
us.dfirst <- us.only[us.only$UnsupervisedOrder == "DenseFirst"]
us.sfirst <- us.only[us.only$UnsupervisedOrder == "SparseFirst"]
us.dfirst <- us.only[us.only$UnsupervisedOrder == "DenseFirst",]
us.sfirst <- us.only[us.only$UnsupervisedOrder == "SparseFirst",]
acc.us <- dcast(data = us.dfirst,formula = Subject~type,fun.aggregate = mean,value.var = "ACC")
acc.rt <- dcast(data = us.dfirst,formula = Subject~type,fun.aggregate = mean,value.var = "RT")
t.test(acc.us$du, acc.us$su)
acc.us <- dcast(data = us.sfirst,formula = Subject~type,fun.aggregate = mean,value.var = "ACC")
acc.rt <- dcast(data = us.sfirst,formula = Subject~type,fun.aggregate = mean,value.var = "RT")
t.test(acc.us$du, acc.us$su)
m1 <- lme(ACC ~ UnsupervisedOrder*type, random = ~1|Subject, data = us.only)
summary(m1)
m1 <- lme(ACC ~ type, random = ~1|Subject, data = us.sfirst)
summary(m1)
m1 <- lme(ACC ~ type, random = ~1|Subject, data = us.dfirst)
summary(m1)
m1 <- lme(ACC ~ type, random = ~1|Subject, data = us.sfirst)
summary(m1)
anova(m1)
m1 <- lme(ACC ~ type, random = ~1|Subject, data = us.dfirst)
anova(m1)
m1 <- lme(ACC ~ UnsupervisedOrder*type, random = ~1|Subject, data = us.only)
summary(m1)
p1 <- ggplot(us.only, aes(UnsupervisedOrder, ACC)) + geom_violin() + facet_grid(.~type)
p1
